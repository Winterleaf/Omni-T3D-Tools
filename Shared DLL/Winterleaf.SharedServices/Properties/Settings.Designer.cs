//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Winterleaf.SharedServices.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "10.0.0.0")]
    public sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("https://www.winterleafentertainment.com/DesktopModules/WLERegistration/OMNIAuth.a" +
            "smx")]
        public string OmniAddin_WLEAuth_OMNIAuth {
            get {
                return ((string)(this["OmniAddin_WLEAuth_OMNIAuth"]));
            }
            set {
                this["OmniAddin_WLEAuth_OMNIAuth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string WorkingFolder {
            get {
                return ((string)(this["WorkingFolder"]));
            }
            set {
                this["WorkingFolder"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("///******************************************************************************" +
            "******\r\n///Any constant that is used in the system as a default variable for a c" +
            "onsole function\r\n///must be defined in this file.\r\n///It should be defined as C+" +
            "+ constant Name <##> C# Syntax <NL>\r\n///****************************************" +
            "********************************************\r\n\r\nMatrixF::Identity\t##BEGIN##\tnew " +
            "TransformF(\"0.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000\")##EN" +
            "D##\r\nColorF::ZERO\t\t##BEGIN##\tnew ColorF(0.0f, 0.0f, 0.0f,0.0f)##END##\r\nColorF::O" +
            "NE\t\t##BEGIN##\tnew ColorF(1.0f, 1.0f, 1.0f,1.0f)##END##\r\nColorF::WHITE\t\t##BEGIN##" +
            "\tnew ColorF(1.0f, 1.0f, 1.0f,1.0f)##END##\r\nColorF::BLACK\t\t##BEGIN##\tnew ColorF(1" +
            ".0f, 1.0f, 1.0f,1.0f)##END##\r\nColorF::RED\t\t##BEGIN##\tnew ColorF(1.0f, 1.0f, 1.0f" +
            ",1.0f)##END##\r\nColorF::GREEN\t\t##BEGIN##\tnew ColorF(1.0f, 1.0f, 1.0f,1.0f)##END##" +
            "\r\nColorF::BLUE\t\t##BEGIN##\tnew ColorF(1.0f, 1.0f, 1.0f,1.0f)##END##\r\n\r\n\r\nPoint2I:" +
            ":Zero\t\t##BEGIN##\tnew Point2I(0,0)\t\t\t\t##END##\r\nPoint2I::One\t\t##BEGIN##\tnew Point2" +
            "I(1,1)\t\t\t\t##END##\r\nPoint2I::Min\t\t##BEGIN##\tnew Point2I(int.MinValue,int.MinValue" +
            ")\t\t\t\t##END##\r\nPoint2I::Max\t\t##BEGIN##\tnew Point2I(int.MaxValue,int.MaxValue)\t\t\t\t" +
            "##END##\r\n\r\n///Point2F::One(1.0f, 1.0f);\r\n///Point2F::Zero(0.0f, 0.0f);\r\n///Point" +
            "2F::Min(F32_MIN, F32_MIN);\r\n///Point2F::Max(F32_MAX, F32_MAX);\r\n\r\n///Point2D::On" +
            "e(1.0, 1.0);\r\n///Point2D::Zero(0.0, 0.0);\r\n\r\n///Point3I::One(1, 1, 1);\r\n///Point" +
            "3I::Zero(0, 0, 0);\r\n\r\nPoint3F::One\t\t##BEGIN##\tnew Point3F(1.0f, 1.0f, 1.0f)##END" +
            "##\r\nPoint3F::Zero\t\t##BEGIN##\tnew Point3F(0.0f, 0.0f, 0.0f)##END##\r\nPoint3F::Min\t" +
            "\t##BEGIN##\tnew Point3F(float.MinValue, float.MinValue, float.MinValue)##END##\r\nP" +
            "oint3F::Max\t\t##BEGIN##\tnew Point3F(float.MaxValue, float.MaxValue, float.MaxValu" +
            "e)##END##\r\nPoint3F::UnitX\t\t##BEGIN##\tnew Point3F(1.0f, .0f, .0f)##END##\r\nPoint3F" +
            "::UnitY\t\t##BEGIN##\tnew Point3F(.0f, 1.0f, .0f)##END##\r\nPoint3F::UnitZ\t\t##BEGIN##" +
            "\tnew Point3F(.0f, .0f, 1.0f)##END##\r\n\r\n///Point4I::One(1, 1, 1, 1);\r\n///Point4I:" +
            ":Zero(0, 0, 0, 0);\r\n\r\n///Point4F::One(1.0f, 1.0f, 1.0f, 1.0f);\r\n///Point4F::Zero" +
            "(0.0f, 0.0f, 0.0f, 0.0f);\r\n\r\nMBOkCancel\t\t##BEGIN##\t1##END##\r\nMIInformation\t\t##BE" +
            "GIN##\t1##END##\r\n\r\n\r\nTransformF::Identity\t##BEGIN##\tnew TransformF(0,0,0,0,0,1,0)" +
            "##END##\r\n\r\nNULL\t\t\t##BEGIN##\tnull##END##\r\n\r\nTSPathShape::Forward\t##BEGIN##\tTypePa" +
            "thShapeState.Forward##END##")]
        public string PreGen_CPP_Constants_cfg {
            get {
                return ((string)(this["PreGen_CPP_Constants_cfg"]));
            }
            set {
                this["PreGen_CPP_Constants_cfg"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"///************************************************************************************
///File Name: PosGen_CPP_FindReplace.cfg
///Description:
///		Comments require 3 slashes and must be first symbols on line
///		This file directs the parser not to parse console functions
///		in the engine.
///
///		This supports wildcards.
///		C++ Class Name:*;	--Any ConsoleFunction/ConsoleMethod/DefineConsoleMethod/
///								DefineConsoleFunction/DefineEngineFunction/DefineEngineMethod 
///								attached to that Class 
///								will not be parsed.
///
///		*:Function Name;	--Any ConsoleMethod/DefineConsoleMethod/
///								DefineConsoleFunction/DefineEngineFunction/DefineEngineMethod
///								regardless of the c++
///								class it belongs to will not be parsed.
///
///		*:_Function Name;	--The underscore is for denoting a ConsoleFunction versus a
///							 DefineConsoleFunction
///************************************************************************************

*:sbmDumpStats;
*:sbmDumpStrings;
*:cls;

*:validateMemory;
*:freeMemoryDump;
*:flagCurrentAllocs;
*:dumpUnflaggedAllocs;
*:dumpAlloc;
*:dumpMemSnapshot;
*:inputLog;


*:_validateMemory;
*:_freeMemoryDump;
*:_flagCurrentAllocs;
*:_dumpUnflaggedAllocs;
*:_dumpAlloc;
*:_dumpMemSnapshot;
NetConnection:setLogging;
*:_inputLog;
Path:getPathId;
*:_sbmDumpStats;
*:_sbmDumpStrings;")]
        public string PreGen_CPP_IgnoreClassFunction_cfg {
            get {
                return ((string)(this["PreGen_CPP_IgnoreClassFunction_cfg"]));
            }
            set {
                this["PreGen_CPP_IgnoreClassFunction_cfg"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("///******************************************************************************" +
            "******\r\n///File Name: PreGen_CPP_ObjParseDef.cfg\r\n///Description:\r\n/// Ok, this " +
            "file handles generating the C++ to serialize and deserialize \r\n/// complex objec" +
            "ts to strings and vice versa\r\n/// DeserializeString will \r\n///\t\t\t\t\t\t--replace {0" +
            "} with the C++ type\r\n///\t\t\t\t\t\t--replace {1} with the parameter name, make sure p" +
            "refix {1} with x__\r\n///\r\n/// Note: this mapping is only used if the object type " +
            "is not in PreGen_CPP_SimObjectBaseClasses.cfg\r\n///          This is used for ret" +
            "urn Types.\r\n///*****************************************************************" +
            "*******************\r\n\r\n///For example...\r\n#ObjectType#=VectorF\r\n#DeserializeStri" +
            "ng#={0} {1} = {0}();\\r\\nsscanf(x__{1},\\\"%f %f %f\\\", &{1}.x, &{1}.y, &{1}.z);\\r\\n" +
            "\r\n\r\n///DeserializeString Generates---->Point3F size = Point3F(); sscanf(x__size," +
            "\"%f %f %f\", &size.x,&size.y,&size.z);\r\n\r\n#SerializeString#=dSprintf(retval,1024," +
            "\\\"%f %f %f \\\",wle_returnObject.x,wle_returnObject.y,wle_returnObject.z);\\r\\nretu" +
            "rn;\\r\\n\r\n\r\n///SerializeString Generates------>dSprintf(retval,1024,\"%f %f %f \",w" +
            "le_returnObject.x,wle_returnObject.y,wle_returnObject.z);\r\n\r\n///Whether this obj" +
            "ect needs to be created as a Pointer in C++\r\n#IsObject#=0\r\n\r\n#ObjectType#=Transf" +
            "ormF\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf( x__{1},\\\"%f %f %f %f %f %f" +
            " %f\\\", &{1}.mPosition.x, &{1}.mPosition.y, &{1}.mPosition.z, &{1}.mOrientation.a" +
            "xis.x, &{1}.mOrientation.axis.y, &{1}.mOrientation.axis.z, &{1}.mOrientation.ang" +
            "le);\r\n#SerializeString#=dSprintf(retval,1024,\\\"%f %f %f %f %f %f %f \\\",wle_retur" +
            "nObject.mPosition.x,wle_returnObject.mPosition.y,wle_returnObject.mPosition.z,wl" +
            "e_returnObject.mOrientation.axis.x,wle_returnObject.mOrientation.axis.y,wle_retu" +
            "rnObject.mOrientation.axis.z,wle_returnObject.mOrientation.angle);\\r\\nreturn;\\r\\" +
            "n\r\n#IsObject#=0\r\n\r\n#ObjectType#=String\r\n#DeserializeString#={0} {1} = {0}( x__{1" +
            "});\r\n#SerializeString#=dSprintf(retval,16384,\\\"%s\\\",wle_returnObject.c_str());\\r" +
            "\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#ObjectType#=SFXStatus\r\n#DeserializeString#={0} {" +
            "1} = ({0})__{1};\r\n#SerializeString#=return (S32)(wle_returnObject);\r\n#IsObject#=" +
            "0\r\n\r\n#ObjectType#=RectSpacingI\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf(x" +
            "__{1}, \\\"%i %i %i %i\\\", &{1}.top, &{1}.bottom, &{1}.left, &{1}.right);\r\n#Seriali" +
            "zeString#=dSprintf(retval,1024,\\\"%i %i %i %i \\\",wle_returnObject.top,wle_returnO" +
            "bject.bottom,wle_returnObject.left,wle_returnObject.right);\\r\\nreturn;\\r\\n\r\n#IsO" +
            "bject#=0\r\n\r\n\r\n#ObjectType#=Point2I\r\n#DeserializeString#={0} {1} = {0}();\\r\\nssca" +
            "nf(x__{1},\\\"%i %i\\\",&{1}.x,&{1}.y);\r\n#SerializeString#=dSprintf(retval,1024,\\\"%i" +
            " %i \\\",wle_returnObject.x,wle_returnObject.y);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#" +
            "ObjectType#=Point3I\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf(x__{1},\\\"%i " +
            "%i %i\\\",&{1}.x,&{1}.y,&{1}.z);\r\n#SerializeString#=dSprintf(retval,1024,\\\"%i %i %" +
            "i \\\",wle_returnObject.x,wle_returnObject.y,wle_returnObject.z);\\r\\nreturn;\\r\\n\r\n" +
            "#IsObject#=0\r\n\r\n#ObjectType#=Point2F\r\n#DeserializeString#={0} {1} = {0}();\\r\\nss" +
            "canf(x__{1},\\\"%f %f\\\",&{1}.x,&{1}.y);\r\n#SerializeString#=dSprintf(retval,1024,\\\"" +
            "%f %f \\\",wle_returnObject.x,wle_returnObject.y);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r" +
            "\n#ObjectType#=Point3F\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf(x__{1},\\\"%" +
            "f %f %f\\\",&{1}.x,&{1}.y,&{1}.z);\r\n#SerializeString#=dSprintf(retval,1024,\\\"%f %f" +
            " %f \\\",wle_returnObject.x,wle_returnObject.y,wle_returnObject.z);\\r\\nreturn;\\r\\n" +
            "\r\n#IsObject#=0\r\n\r\n#ObjectType#=GuiWindowCtrl\r\n#DeserializeString#={0} {1} = GuiC" +
            "anvas::findObject(x__{1}); \r\n#SerializeString#=dSprintf(retval,1024,\\\"%i\\\",wle_r" +
            "eturnObject->getId());\\r\\nreturn;\\r\\n\r\n///In this case, this object is not derri" +
            "ved from simobject so we need to flag it as a object.  I.E. pointer\r\n#IsObject#=" +
            "1\r\n\r\n#ObjectType#=ColorF\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf(x__{1}," +
            "\\\"%f %f %f %f\\\",&{1}.red,&{1}.green,&{1}.blue,&{1}.alpha);\r\n#SerializeString#=dS" +
            "printf(retval,1024,\\\"%f %f %f %f \\\",wle_returnObject.red,wle_returnObject.green," +
            "wle_returnObject.blue,wle_returnObject.alpha);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#" +
            "ObjectType#=ColorI\r\n#DeserializeString#={0} {1} = {0}();\\r\\n{{\\r\\nint r,g,b,a;\\r" +
            "\\nsscanf(x__{1},\"%d %d %d %d \",&r,&g,&b,&a);\\r\\n{1}.red =(unsigned short)r;\\r\\n{" +
            "1}.green=(unsigned short)g;\\r\\n{1}.blue=(unsigned short)b;\\r\\n{1}.alpha=(unsigne" +
            "d short)a;\\r\\n}}\\r\\n\r\n#SerializeString#=dSprintf(retval,1024,\\\"%d %d %d %d \\\",(i" +
            "nt)wle_returnObject.red,(int)wle_returnObject.green,(int)wle_returnObject.blue,(" +
            "int)wle_returnObject.alpha);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#ObjectType#=WorldE" +
            "ditor::AlignmentType\r\n#DeserializeString#={0} {1} = ({0})x__{1};\r\n#SerializeStri" +
            "ng#=return (S32)(wle_returnObject);\r\n#IsObject#=0\r\n\r\n#ObjectType#=GuiGraphType\r\n" +
            "#DeserializeString#={0} {1} = ({0})x__{1};\r\n#SerializeString#=return (S32)(wle_r" +
            "eturnObject);\r\n#IsObject#=0\r\n\r\n#ObjectType#=MBButtons\r\n#DeserializeString#={0} {" +
            "1} = ({0})x__{1};\r\n#SerializeString#=return (S32)(wle_returnObject);\r\n#IsObject#" +
            "=0\r\n\r\n#ObjectType#=MBIcons\r\n#DeserializeString#={0} {1} = ({0})x__{1};\r\n#Seriali" +
            "zeString#=return (S32)(wle_returnObject);\r\n#IsObject#=0\r\n\r\n#ObjectType#=GFXForma" +
            "t\r\n#DeserializeString#={0} {1} = ({0})x__{1};\r\n#SerializeString#=return (S32)(wl" +
            "e_returnObject);\r\n#IsObject#=0\r\n\r\n#ObjectType#=SFXDistanceModel\r\n#DeserializeStr" +
            "ing#={0} {1} = ({0})x__{1};\r\n#SerializeString#=return (S32)(wle_returnObject);\r\n" +
            "#IsObject#=0\r\n\r\n#ObjectType#=const char\r\n#DeserializeString#=const char* {1} = (" +
            "const char*)x__{1};\\r\\n\r\n#SerializeString#=dSprintf(retval,16384,\\\"%s\\\",wle_retu" +
            "rnObject);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#ObjectType#=AngAxisF\r\n#DeserializeSt" +
            "ring#={0} {1} = {0}();\\r\\nsscanf(x__{1},\\\"%f %f %f %f\\\",&{1}.axis.x,&{1}.axis.y," +
            "&{1}.axis.z,&{1}.angle);\r\n#SerializeString#=dSprintf(retval,1024,\\\"%f %f %f %f \\" +
            "\",wle_returnObject.axis.x,wle_returnObject.axis.y,wle_returnObject.axis.z,wle_re" +
            "turnObject.angle);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#ObjectType#=Box3F\r\n#Deserial" +
            "izeString#={0} {1} = {0}();\\r\\nsscanf(x__{1},\\\"%f %f %f %f %f %f\\\",&{1}.minExten" +
            "ts.x,&{1}.minExtents.y,&{1}.minExtents.z,&{1}.maxExtents.x,&{1}.maxExtents.y,&{1" +
            "}.maxExtents.z);\r\n#SerializeString#=dSprintf(retval,1024,\\\"%f %f %f %f %f %f \\\"," +
            "wle_returnObject.minExtents.x,wle_returnObject.minExtents.y,wle_returnObject.min" +
            "Extents.z,wle_returnObject.maxExtents.x,wle_returnObject.maxExtents.y,wle_return" +
            "Object.maxExtents.z);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#ObjectType#=SimXMLDocumen" +
            "t\r\n#DeserializeString#= AssertFatal( 1, \"Not Defined\" );\r\n#SerializeString#=dSpr" +
            "intf(retval,1024,\\\"%i\\\",wle_returnObject->getId());\\r\\nreturn;\\r\\n\r\n#IsObject#=0" +
            "\r\n\r\n#ObjectType#=MatrixF\r\n#DeserializeString#= AssertFatal( 1, \"Not Defined\" );\\" +
            "r\\n\r\n///#SerializeString#=dSprintf(retval,1024,\\\"%f %f %f %f %f %f %f %f %f\\\",Tr" +
            "ansformF(wle_returnObject).mPosition.x,TransformF(wle_returnObject).mPosition.y," +
            "TransformF(wle_returnObject).mPosition.z,TransformF(wle_returnObject).mOrientati" +
            "on.axis.x,TransformF(wle_returnObject).mOrientation.axis.y,TransformF(wle_return" +
            "Object).mOrientation.axis.z,TransformF(wle_returnObject).mOrientation.angle);\\r\\" +
            "nreturn;\\r\\n\r\n#SerializeString#=Point3F col0, col1, col2;wle_returnObject.getCol" +
            "umn(0, &col0);wle_returnObject.getColumn(1, &col1);wle_returnObject.getColumn(2," +
            " &col2);dSprintf(retval,1024,\\\"%g %g %g %g %g %g %g %g %g\\\",col0.x, col0.y, col0" +
            ".z, col1.x, col1.y, col1.z, col2.x, col2.y, col2.z);\\r\\nreturn;\\r\\n\r\n\r\n#IsObject" +
            "#=0\r\n\r\n#ObjectType#=Polyhedron\r\n#DeserializeString#= AssertFatal( 1, \"Not Define" +
            "d\" );\\r\\n\r\n#SerializeString#= AssertFatal( 1, \"Not Defined\" );\\r\\n\r\n#IsObject#=0" +
            "\r\n\r\n\r\n\r\n#ObjectType#=EaseF\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf(x__{1" +
            "},\\\"%d %d %f %f\\\",&{1}.dir,&{1}.type,&{1}.param[0],&{1}.param[1]);\r\n#SerializeSt" +
            "ring#=dSprintf(retval,1024,\\\"%d %d %g %g \\\",wle_returnObject.dir,wle_returnObjec" +
            "t.type,wle_returnObject.param[0],wle_returnObject.param[1]);\\r\\nreturn;\\r\\n\r\n#Is" +
            "Object#=0\r\n\r\n\r\n#ObjectType#=Point4F\r\n#DeserializeString#={0} {1} = {0}();\\r\\nssc" +
            "anf(x__{1},\\\"%g %g %g %g\\\",&{1}.x,&{1}.y,&{1}.z,&{1}.w);\r\n#SerializeString#=dSpr" +
            "intf(retval,1024,\\\"%g %g %g %g \\\",wle_returnObject.x,wle_returnObject.y,wle_retu" +
            "rnObject.z,wle_returnObject.w);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r\n\r\n#ObjectType#=Rec" +
            "tF\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf(x__{1},\\\"%g %g %g %g\\\",&{1}.p" +
            "oint.x,&{1}.point.y,&{1}.extent.x,&{1}.extent.y);\r\n#SerializeString#=dSprintf(re" +
            "tval,1024,\\\"%g %g %g %g \\\",wle_returnObject.point.x,wle_returnObject.point.y,wle" +
            "_returnObject.extent.x,wle_returnObject.extent.y);\\r\\nreturn;\\r\\n\r\n#IsObject#=0\r" +
            "\n\r\n#ObjectType#=RectI\r\n#DeserializeString#={0} {1} = {0}();\\r\\nsscanf(x__{1},\\\"%" +
            "d %d %d %d\\\",&{1}.point.x,&{1}.point.y,&{1}.extent.x,&{1}.extent.y);\r\n#Serialize" +
            "String#=dSprintf(retval,1024,\\\"%d %d %d %d \\\",wle_returnObject.point.x,wle_retur" +
            "nObject.point.y,wle_returnObject.extent.x,wle_returnObject.extent.y);\\r\\nreturn;" +
            "\\r\\n\r\n#IsObject#=0\r\n\r\n#ObjectType#=PathShapeState\r\n#DeserializeString#={0} {1} =" +
            " ({0})x__{1};\r\n#SerializeString#=return (S32)(wle_returnObject);\r\n#IsObject#=0")]
        public string PreGen_CPP_ObjParseDef_cfg {
            get {
                return ((string)(this["PreGen_CPP_ObjParseDef_cfg"]));
            }
            set {
                this["PreGen_CPP_ObjParseDef_cfg"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("///******************************************************************************" +
            "******\r\n///File Name: PreGen_CPP_SimObjectBaseClasses.cfg\r\n///Description:\r\n///\t" +
            "\tComments require 3 slashes and must be first symbols on line\r\n///\t\tThis file is" +
            " where you put any object you would use Sim::findObject() to find \r\n///\t\tAny new" +
            " simobject based classes which are used as parameters or return types\r\n///\t\tneed" +
            " to be added to this file\r\n///**************************************************" +
            "**********************************\r\n \r\n SimSet SimObject SimGroup SFXSource SFXP" +
            "arameter\r\n SceneObject RenderBinManager GuiControl GuiCanvas \r\n GameBase ConvexS" +
            "hape ArrayObject GuiControlProfile \r\n GuiCursor MessageVector MissionArea Materi" +
            "al \r\n NetConnection ShapeBase SFXTrack ShapeBaseImageData \r\n GameBaseData SFXPro" +
            "file WheeledVehicleTire \r\n WheeledVehicleSpring HTTPObject TCPObject SimXMLDocum" +
            "ent \r\n FileObject FileStreamObject StreamObject ZipObject \r\n DecalRoad MeshRoad " +
            "River ScatterSky \r\n ForestWindEmitter CubemapData DebugDrawer GuiTSCtrl \r\n GuiBi" +
            "tmapButtonCtrl GuiButtonBaseCtrl GuiCheckBoxCtrl \r\n GuiIconButtonCtrl GuiSwatchB" +
            "uttonCtrl GuiAutoScrollCtrl \r\n GuiDragAndDropControl GuiDynamicCtrlArrayControl " +
            "GuiFormCtrl \r\n GuiFrameSetCtrl GuiPaneControl GuiRolloutCtrl GuiScrollCtrl \r\n Gu" +
            "iStackControl GuiTabBookCtrl GuiBitmapCtrl \r\n GuiDirectoryFileListCtrl GuiGameLi" +
            "stMenuCtrl GuiGameListOptionsCtrl \r\n GuiListBoxCtrl GuiMLTextCtrl GuiPopUpMenuCt" +
            "rlEx GuiSliderCtrl \r\n GuiTabPageCtrl GuiTextCtrl GuiTextEditCtrl GuiTextListCtrl" +
            " \r\n GuiTreeViewCtrl GuiEditCtrl GuiImageList GuiMenuBar \r\n GuiShapeEdPreview Gui" +
            "MessageVectorCtrl GuiProgressBitmapCtrl \r\n GuiTheoraCtrl EditTSCtrl GuiMissionAr" +
            "eaCtrl WorldEditor \r\n InteriorInstance ShaderData PostEffect RenderPassManager \r" +
            "\n RenderPassStateToken SFXController SFXSound SFXState \r\n SFXFMODEventGroup Acti" +
            "onMap NetObject AIPlayer \r\n Camera Debris GroundPlane GuiMaterialPreview \r\n GuiO" +
            "bjectView Item LightBase LightDescription \r\n LightFlareData PathCamera PhysicalZ" +
            "one Player \r\n Projectile ProximityMine RigidShape ShapeBaseData \r\n Trigger TSSta" +
            "tic Zone DecalData RenderMeshExample \r\n Lightning GuiGraphCtrl FileDialog Portal" +
            " \r\n Precipitation GameConnection \r\n PhysicsForce SFXEmitter AITurretShape Turret" +
            "Shape \r\n FlyingVehicle WheeledVehicle TerrainBlock PhysicsShape \r\n DynamicConsol" +
            "eMethodComponent SimComponent ConsoleLogger \r\n FieldBrushObject PersistenceManag" +
            "er SimPersistSet SkyBox \r\n Sun GuiMeshRoadEditorCtrl GuiRiverEditorCtrl GuiRoadE" +
            "ditorCtrl \r\n Forest ForestBrush ForestBrushTool ForestEditorCtrl \r\n ForestSelect" +
            "ionTool GuiToolboxButtonCtrl GuiColorPickerCtrl \r\n GuiFileTreeCtrl GuiGradientCt" +
            "rl GuiMaterialCtrl GuiPopUpMenuCtrl \r\n DbgFileView DbgFileView GuiFilterCtrl Gui" +
            "Inspector \r\n GuiInspectorTypeFileName GuiInspectorTypeBitMask32 GuiParticleGraph" +
            "Ctrl \r\n GuiInspectorDynamicField GuiInspectorDynamicGroup GuiInspectorField \r\n G" +
            "uiVariableInspector GuiIdleCamFadeBitmapCtrl GuiTickCtrl \r\n CreatorTree EditMana" +
            "ger GuiConvexEditorCtrl GuiDecalEditorCtrl \r\n GuiMissionAreaEditorCtrl GuiTerrPr" +
            "eviewCtrl TerrainSmoothAction \r\n TerrainEditor MECreateUndoAction MEDeleteUndoAc" +
            "tion \r\n WorldEditorSelection LangTable PathedInterior SimResponseCurve \r\n MenuBa" +
            "r PopupMenu AIClient AIConnection \r\n SpawnSphere StaticShape PhysicsDebrisData P" +
            "xFluid \r\n PxMultiActor PxMultiActorData Settings CompoundUndoAction \r\n UndoManag" +
            "er UndoAction UndoManager EventManager \r\n Message SimDataBlock Prefab TimeOfDay " +
            "GuiWindowCtrl CubemapData \r\n SFXEmitter DecalData RigidShape ShaderData Interior" +
            "Instance \r\n GuiDragAndDropControl ScriptTickObject GuiChunkedBitmapCtrl GuiClock" +
            "Hud \r\n TheoraTextureObject ForestItemData GuiControl ReadXML AIBot PhysBody\r\n Ra" +
            "gDoll RigidBody LevelInfo NavMesh NavPath\r\n  \r\n Path SimpleNetObject \r\n  \r\n/// L" +
            "egacy ParticleSystem\r\n ParticleEmitterData ParticleEmitterNode ParticleData\r\n\r\n/" +
            "// IPS Architecture\r\n BillboardParticleData BillboardRibbonParticleData\r\n Sphere" +
            "EmitterData SphereEmitterNode\r\n TimedDebugVector\r\n\r\n/// IPS SimObjects -----\r\n P" +
            "articleEffect PixelMask\r\n \r\n MeshEmitterData RadiusMeshEmitterData NodeMeshEmitt" +
            "erData\r\n GroundEmitterData GroundEmitterNode\r\n GraphEmitterData GraphEmitterNode" +
            "\r\n MaskEmitterData MaskEmitterNode\r\n CompositeEmitterData\r\n\r\n PointLightParticle" +
            "Data TSShapeParticleData\r\n EffectParticleData EmitterParticleData\r\n\r\n\r\n/// -----" +
            " IPS SimObjects\r\n \r\n \r\nLeapMotionFrame RazerHydraFrame GuiAutoCompleteCtrl GuiTa" +
            "bleControl\r\n GuiAnimatedControl CloudLayer fxGuiSnooper GameTSCtrl TerrainSolder" +
            "EdgesAction \r\nCoverPoint GuiNavEditorCtrl GuiNavEditorUndoAction NavMesh NavPath" +
            " GuiFlexibleArrayControl \r\nTSPathShape WalkableShape TSDynamic TSAttachable TSSh" +
            "apeConstructor VolumetricFog \r\n\r\n\r\n")]
        public string PreGen_CPP_SimObjectBaseClasses_cfg {
            get {
                return ((string)(this["PreGen_CPP_SimObjectBaseClasses_cfg"]));
            }
            set {
                this["PreGen_CPP_SimObjectBaseClasses_cfg"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"///************************************************************************************
///File Name: PreGen_CPP_TypeConv.cfg
///Description:
///		Comments require 3 slashes and must be first symbols on line
///		This is where you add any translations on enumerations.;
///		C++ Type A -> Type B;
///		This tells DNT that when it finds a return type of A Convert it to B;
///		
///     If When you compile the C++ you get the error: ""'void' function returning a value""
///     Then most likely you need to add an entry here to tell the application
///     How to convert the type.
///     If you have a ConsoleFunction that returns an enumeration type, make sure
///     you add the conversion here.
///************************************************************************************

SFXStatus S32;
WorldEditor::AlignmentType S32;
GuiGraphType S32;
Camera::CameraMotionMode S32;
TSStatic::MaskBits S32;
GFXFormat S32;
SFXDistanceModel S32;
MBButtons S32;
bool S32;
MBIcons S32;
S32 S32;
F32 F32;
float F32;
U32 U32;
int S32;
F64 F64;
domUpAxisType S32;
LeapMotionFramePointableType S32;
PathShapeState S32;")]
        public string PreGen_CPP_TypeConv_cfg {
            get {
                return ((string)(this["PreGen_CPP_TypeConv_cfg"]));
            }
            set {
                this["PreGen_CPP_TypeConv_cfg"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("///******************************************************************************" +
            "******\r\n///File Name: PreGen_CS__TypeConvCPPtoCS.cfg\r\n///Description:\r\n///\t\tThis" +
            " file is used to map the T3D structs to there CSharp structs\r\n///\t\tIf you add a " +
            "new struct in both the C++ and C#\r\n///\t\tMake sure you add a mapping to PreGen_CP" +
            "P_ObjParseDef.cfg\r\n\r\n///                           Note:  Class is a simObject M" +
            "odel class type, and enum\r\n///                           can be either a hardcod" +
            "ed or generated enumeration.\r\n///***********************************************" +
            "*************************************\r\n\r\n\r\n///Format is C++ Class/Enum (space) C" +
            "Sharp Class/Enum (Space) (Class/Enum)\r\nRectSpacingI RectSpacingI Class;\r\nColorF " +
            "ColorF Class;\r\nPoint2I Point2I Class;\r\nPoint3I Point3I Class;\r\nPoint2F Point2F C" +
            "lass;\r\nPoint3F Point3F Class;\r\nPoint4F Point4F class;\r\nMatrixF MatrixF Class;\r\nT" +
            "ypeMatrixPosition MatrixPosition class;\r\nTypeMatrixRotation AngAxisF class;\r\nTra" +
            "nsformF TransformF Class;\r\nVectorF Point3F Class;\r\nColorI ColorI Class;\r\nBox3F B" +
            "ox3F Class;\r\ndomUpAxisType domUpAxisType Enum;\r\nPolyhedron Polyhedron class;\r\nRe" +
            "ctI RectI class;\r\nRectF RectF class;\r\nEaseF EaseF class;\r\nAngAxisF AngAxisF clas" +
            "s;\r\n///TSStatic is a coded enum, so it\'s fine\r\nTSStatic::MaskBits TSStatic__Mask" +
            "Bits Enum;\r\n///the rest are parsed so they need to be prefixed w/ Type\r\nWorldEdi" +
            "tor::AlignmentType TypeWorldEditorAlignmentType Enum;\r\nGuiGraphType TypeGuiGraph" +
            "Type Enum;\r\nCamera::CameraMotionMode TypeCameraMotionMode Enum;\r\nCameraMotionMod" +
            "e TypeCameraMotionMode Enum;\r\nSFXDistanceModel TypeSFXDistanceModel Enum;\r\nGFXFo" +
            "rmat TypeGFXFormat Enum;\r\nMBButtons TypeMBButtons Enum;\r\nMBIcons TypeMBIcons Enu" +
            "m;\r\nSFXStatus TypeSFXStatus Enum;\r\n\r\nTypeSFXParameterName TypeSFXParameterName c" +
            "lass;\r\nTypeSFXDescriptionName TypeSFXDescriptionName class;\r\nTypeSFXTrackName Ty" +
            "peSFXTrackName class;\r\nTypeSFXEnvironmentName TypeSFXEnvironmentName class;\r\nTyp" +
            "eSFXStateName TypeSFXStateName class;\r\nTypeSFXAmbienceName TypeSFXAmbienceName c" +
            "lass;\r\nTypeImageFilename TypeImageFilename class;\r\nTypeSFXSourceName TypeSFXSour" +
            "ceName class;\r\nTypeCubemapName TypeCubemapName class;\r\nTypeMaterialName TypeMate" +
            "rialName class;\r\nTypeName TypeName class;\r\nTypePrefabFilename TypePrefabFilename" +
            " class;\r\nTypeShapeFilename TypeShapeFilename class;\r\nTypeTerrainMaterialName Typ" +
            "eTerrainMaterialName class;\r\nTypeGuiControl TypeGuiControl class;\r\n\r\nPathShapeSt" +
            "ate TypePathShapeState Enum;\r\n\r\nSimPath::Path Path class;")]
        public string PreGen_CS__TypeConvCPPtoCS_cfg {
            get {
                return ((string)(this["PreGen_CS__TypeConvCPPtoCS_cfg"]));
            }
            set {
                this["PreGen_CS__TypeConvCPPtoCS_cfg"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"///This files specifies which directories to skip when interrogating the c++.
///Any path that contains any of the words below are skipped.
///To Add a new one, just enter it on a blank row with a semicolon.
platformMac;
platformPOSIX;
platformX86UNIX;
dotnetc.cpp;
dotnetc.h;")]
        public string PreGen_IgnoreSourceFiles_cfg {
            get {
                return ((string)(this["PreGen_IgnoreSourceFiles_cfg"]));
            }
            set {
                this["PreGen_IgnoreSourceFiles_cfg"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"///This files specifies which directories to skip when interrogating the c++ for enumerations.
///These files made this list because they used to many #defines and became to problematic to parse.
///Any path that contains any of the words below are skipped.
///To Add a new one, just enter it on a blank row with a semicolon.
console\ast.h;
console\engineAPI.h;
console\engineFunctions.h;
console\dynamicTypes.h;
console\compiler.h;
console\consoleObject.h;
console\engineObject.h;
console\engineTypeInfo.h;
console\engineTypes.h;
console\CMDscan.h;
core\util\journal\journal.h;
gfx\gfxPrimitiveBuffer.h;")]
        public string PreGen_IgnoreSourceFilesForEnumeration_cfg {
            get {
                return ((string)(this["PreGen_IgnoreSourceFilesForEnumeration_cfg"]));
            }
            set {
                this["PreGen_IgnoreSourceFilesForEnumeration_cfg"] = value;
            }
        }
    }
}
